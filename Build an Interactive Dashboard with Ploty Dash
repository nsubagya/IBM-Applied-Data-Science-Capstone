# Import the required libraries
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px

# Read the SpaceX launch dataset
spacex_df = pd.read_csv('spacex_launch_dash.csv')

# Create a dash application
app = dash.Dash(__name__)

# Build the dash app layout
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Data Analysis', style={'text-align': 'center'}),
    html.Div([
        html.Div([
            html.Label('Select a Launch Site:'),
            dcc.Dropdown(
                id='site-dropdown',
                options=[
                    {'label': 'All Sites', 'value': 'ALL'},
                    {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                    {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                    {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                    {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                ],
                value='ALL',
                placeholder='Select a Launch Site',
                searchable=True
            )
        ], style={'width': '40%', 'display': 'inline-block'}),

        html.Div([
            html.Label('Payload Range (kg):'),
            dcc.RangeSlider(
                id='payload-slider',
                min=0,
                max=10000,
                step=1000,
                marks={i: str(i) for i in range(0, 10001, 2000)},
                value=[0, 10000]
            )
        ], style={'width': '50%', 'display': 'inline-block'})
    ]),

    html.Div([
        html.Div([
            dcc.Graph(id='success-pie-chart')
        ], style={'width': '100%', 'display': 'inline-block'})
    ]),

    html.Div([
        html.Div([
            dcc.Graph(id='success-payload-scatter-chart')
        ], style={'width': '100%', 'display': 'inline-block'})
    ])
])

# Callback function for success-pie-chart
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def update_pie_chart(entered_site):
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, names='Launch Site', title='Total Success Launches by Site')
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        fig = px.pie(filtered_df, names='class', title='Success/Failure Launches at {}'.format(entered_site))
    return fig

# Callback function for success-payload-scatter-chart
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def update_scatter_chart(entered_site, payload_range):
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= payload_range[0]) & 
                            (spacex_df['Payload Mass (kg)'] <= payload_range[1])]
    if entered_site == 'ALL':
        fig = px.scatter(filtered_df, x='Payload Mass (kg)', y='class', color='Booster Version Category',
                         title='Payload Mass vs. Class (All Sites)')
    else:
        site_filtered_df = filtered_df[filtered_df['Launch Site'] == entered_site]
        fig = px.scatter(site_filtered_df, x='Payload Mass (kg)', y='class', color='Booster Version Category',
                         title='Payload Mass vs. Class at {}'.format(entered_site))
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(port=8051)
